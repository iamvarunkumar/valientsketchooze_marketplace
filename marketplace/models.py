from django.db import models
from django.conf import settings # Required to link to the User model correctly

class Artwork(models.Model):
    # --- Core Artwork Details ---
    title = models.CharField(max_length=200, help_text="The title of the artwork.")
    description = models.TextField(blank=True, null=True, help_text="A detailed description of the artwork (optional).")
    price = models.DecimalField(
        max_digits=10,        # Allows prices up to 99,999,999.99
        decimal_places=2,     # Stores price with 2 decimal places (e.g., for Rupees/Paisa)
        help_text="Price in INR."
    )
    # --- File & Artist ---
    # Requires Pillow library: pip install Pillow
    image = models.ImageField(
        upload_to='artworks/', # Files will be saved in MEDIA_ROOT/artworks/ directory
        help_text="The main image file for the artwork."
    )
    artist = models.ForeignKey(
        settings.AUTH_USER_MODEL,     # Links to the built-in User model
        on_delete=models.CASCADE,     # If the artist User is deleted, delete their artwork too
        related_name='artworks',      # Allows accessing user.artworks easily
        help_text="The artist who uploaded this artwork."
    )
    # --- Timestamps ---
    created_at = models.DateTimeField(auto_now_add=True) # Automatically set when created
    updated_at = models.DateTimeField(auto_now=True)     # Automatically set when saved

    # --- Representation ---
    def __str__(self):
        # How the artwork object will be represented (e.g., in the admin)
        return f"{self.title} by {self.artist.username}"
        
        
    # marketplace/models.py


class Order(models.Model):
    # Define status choices
    STATUS_PENDING = 'PENDING'
    STATUS_PAID = 'PAID'
    STATUS_FAILED = 'FAILED'

    STATUS_CHOICES = [
        (STATUS_PENDING, 'Pending'),
        (STATUS_PAID, 'Paid'),
        (STATUS_FAILED, 'Failed'),
    ]

    # Link to the user making the purchase (assuming users must be logged in)
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL, # Keep order record even if user is deleted? Or models.PROTECT?
        null=True # Set null if user deleted
        # If login is strictly required, remove null=True later
    )
    # Link to the artwork being purchased
    artwork = models.ForeignKey(
        Artwork,
        on_delete=models.PROTECT # Prevent deleting artwork if it has orders? Decide based on business logic.
    )
    # Store the amount at the time of order creation
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    # Track the payment status
    status = models.CharField(
        max_length=10,
        choices=STATUS_CHOICES,
        default=STATUS_PENDING
    )
    # Store the Order ID generated by Razorpay
    provider_order_id = models.CharField(
        max_length=40, # Check Razorpay docs for max order_id length, adjust if needed
        # unique=True,   # Ensure gateway order IDs are unique
        help_text="Razorpay Order ID"
    )
    # Store the Payment ID once payment is successful (from callback/webhook)
    payment_id = models.CharField(max_length=40, null=True, blank=True, help_text="Razorpay Payment ID")
    # Store the signature for verifying callbacks (from callback/webhook)
    signature = models.CharField(max_length=100, null=True, blank=True, help_text="Razorpay Signature")
    # Timestamp for when the order attempt was created
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order {self.id} for {self.artwork.title} by {self.user.username if self.user else 'Guest'} [{self.status}]"

    class Meta:
        ordering = ['-created_at'] # Show newest orders first by default